unit Rel_DespConvPlano002;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  Bas_TelaPadrao, ComCtrls, PDJButton, ExtCtrls, StdCtrls, DCChoice, DB,
  Grids, DBGrids, Buttons, Mask, DBCtrls;

type                             
  TFrm_Rel_DespConvPlano002 = class(TFrm_Bas_TelaPadrao)
    Panel4: TPanel;
    PDJButton4: TPDJButton;
    edt_conveniados: TDCEdit;
    Panel1: TPanel;
    cb2_cod_mes: TDCComboBox;
    edt_ano2: TDCEdit;
    Panel7: TPanel;
    cbx_cod_mes: TDCComboBox;
    edt_ano: TDCEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure PDJButton4Click(Sender: TObject);
  private
    { Private declarations }
    dtrefe, conven : string ;
    function CriticaParametros : Boolean ;
  public
    { Public declarations }
  end;

var
  Frm_Rel_DespConvPlano002: TFrm_Rel_DespConvPlano002;

implementation
uses Imp_Med_ResumoConta, dtm_principal, Fun_Medico, Fun_ConsCadastro, Constantes,
Imp_Med_DespConvPlano002 ;

{$R *.DFM}

procedure TFrm_Rel_DespConvPlano002.FormCreate(Sender: TObject);
begin
  FTitulo       := 'Relatórios de Despesas de Conveniados por Plano' ;
  FEditChave    := 'edt_cod_conveniado' ;
  FTitPesquisa  := 'Localizar Conveniados' ;
  FPesquisa     := 'cod_conveniado, nome_con, razao_con' ;
  FPesquisaTit  := 'Código, Nome do Conveniado, Razão Social' ;
  inherited;
end;

procedure TFrm_Rel_DespConvPlano002.FormShow(Sender: TObject);
begin
  inherited;
  BAS_CarregarCombo('cbx_cod_mes', 'nome_mes');
  BAS_CarregarCombo('cb2_cod_mes', 'nome_mes');
end;

function TFrm_Rel_DespConvPlano002.CriticaParametros : Boolean ;
begin
//  result := (not BAS_ValidarCampo(edt_cod_conveniado.name, 'Código do Conveiado deve ser Preenchido !', VLD_Preenchido )) or
//  (not BAS_ValidarCampo(cbx_cod_mes.name, 'Mes de Referência da Conta deve ser Preenchida !', VLD_Preenchido )) or
//  (not BAS_ValidarCampo(edt_ano.name, 'Ano de Referencia da Conta deve ser Preenchida !', VLD_Preenchido )) or
//  (not BAS_ValidarCampo(edt_sequencia_con.name, 'Sequencia da Conta deve ser Preenchida !', VLD_Preenchido )) ;
end;

procedure TFrm_Rel_DespConvPlano002.PDJButton4Click(Sender: TObject);
begin
  inherited;
//  if CriticaParametros then
//    Exit;
  with Fdt_principal.spc_cons_med_despconvplano002 do
  begin
    close;
    if edt_conveniados.text = '' then
      ParamByName('@cod_conveniado').AsString := '0'
    else  
      ParamByName('@cod_conveniado').AsString := edt_conveniados.text;
    ParamByName('@dtreferenciaIni_cta').AsString := cbx_cod_mes.valueItem + '/01/'+edt_ano.text;
    ParamByName('@dtreferenciaFin_cta').AsString := cb2_cod_mes.valueItem + '/01/'+edt_ano2.text;
    ParamByName('@sequenciaIni_cta').AsString := '1' ;
    ParamByName('@sequenciaFin_cta').AsString := '100' ;
    open;
  end;
  Frm_Imp_Med_DespConvPlano002 := TFrm_Imp_Med_DespConvPlano002.Create(Self);
  Frm_Imp_Med_DespConvPlano002.FPeriodoInicial := cbx_cod_mes.text+'/'+edt_ano.text;
  Frm_Imp_Med_DespConvPlano002.FPeriodoFinal := cb2_cod_mes.text+'/'+edt_ano2.text;
  Frm_Imp_Med_DespConvPlano002.QuickRep1.Preview;
  Frm_Imp_Med_DespConvPlano002.Release;
  Fdt_principal.spc_cons_med_despconvplano002.close;
end;

end.



